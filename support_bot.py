# support_bot.py
import os
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ .env ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

if not BOT_TOKEN:
    raise SystemExit("‚ùå –û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("tickets.db", check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS tickets (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    message TEXT,
    status TEXT DEFAULT 'open'
)
""")
conn.commit()

# --- –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ ---
def format_status(status: str) -> str:
    if status == "open":
        return "–û—Ç–∫—Ä—ã—Ç üü¢"
    elif status == "closed":
        return "–ó–∞–∫—Ä—ã—Ç üî¥"
    else:
        return status

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        text = (
            "üëã *–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!*\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏:*\n"
            "üìÑ /alltickets ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã\n"
            "‚úÖ /close <id> ‚Äî –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç\n"
            "*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
            "üÜï /new <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç\n"
            "üìã /mytickets ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–∏–∫–µ—Ç—ã\n"
            "‚ÑπÔ∏è /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é\n"
        )
    else:
        text = (
            "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.*\n\n"
            "üìù *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
            "üÜï /new <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç\n"
            "üìã /mytickets ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–∏–∫–µ—Ç—ã\n"
            "‚ÑπÔ∏è /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é\n"
        )
    await update.message.reply_text(text, parse_mode="Markdown")

async def new_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ: /new <—Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã>")
        return
    message = " ".join(context.args)
    cur.execute("INSERT INTO tickets (user_id, username, message) VALUES (?, ?, ?)",
                (update.effective_user.id, update.effective_user.username, message))
    conn.commit()
    ticket_id = cur.lastrowid
    await update.message.reply_text(f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} —Å–æ–∑–¥–∞–Ω!")
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(admin_id,
                                           f"üÜï –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç @{update.effective_user.username}:\n{message}")
        except Exception:
            pass

async def my_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cur.execute("SELECT id, message, status FROM tickets WHERE user_id=?", (update.effective_user.id,))
    rows = cur.fetchall()
    if not rows:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.")
    else:
        text = "\n".join([f"#{tid} [{format_status(status)}] {msg}" for tid, msg, status in rows])
        await update.message.reply_text("üìã *–¢–≤–æ–∏ —Ç–∏–∫–µ—Ç—ã:*\n" + text, parse_mode="Markdown")

async def all_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    cur.execute("SELECT id, username, message, status FROM tickets")
    rows = cur.fetchall()
    if not rows:
        await update.message.reply_text("üì≠ –ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.")
    else:
        text = "\n".join([f"#{tid} @{user} [{format_status(status)}] {msg}" for tid, user, msg, status in rows])
        await update.message.reply_text("üìã *–í—Å–µ —Ç–∏–∫–µ—Ç—ã:*\n" + text, parse_mode="Markdown")

async def close_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /close <id>")
        return
    ticket_id = context.args[0]
    cur.execute("UPDATE tickets SET status='closed' WHERE id=?", (ticket_id,))
    conn.commit()
    await update.message.reply_text(f"üî¥ –¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç.")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("new", new_ticket))
    app.add_handler(CommandHandler("mytickets", my_tickets))
    app.add_handler(CommandHandler("alltickets", all_tickets))
    app.add_handler(CommandHandler("close", close_ticket))

    app.run_polling()

if __name__ == "__main__":
    main()
